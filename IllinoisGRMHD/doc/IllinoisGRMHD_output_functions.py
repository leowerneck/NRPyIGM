# Import Python modules
import os,sys                # Python module: used for system and OS specific commands
import sympy as sp           # Python module: used for symbolic expressions

# Register NRPy+ root directory to the path
nrpy_dir_path = os.path.join("..","..")
if nrpy_dir_path not in sys.path:
    sys.path.append(nrpy_dir_path)

# Load NRPy+ modules
from outputC import *        # NRPy+ module: used to output sympy expressions to C
import indexedexp as ixp     # NRPy+ module: used to generate indexed expressions (e.g. g_{\mu\nu})
import cmdline_helper as cmd # NRPy+ module: used for command line features

# Create the NRPy+ header file directory, if it doesn't already exist
IGM_src_dir_path = os.path.join("..","src")
cmd.mkdir(os.path.join(IGM_src_dir_path,"NRPy_generated_headers"))
NRPy_headers_dir_path = os.path.join(IGM_src_dir_path,"NRPy_generated_headers")

# Set up a neat function to output the expressions to NRPy+ generated files
def NRPy_IGM_write_to_file(filepath,filename,contents,precontents="",postcontents=""):
    with open(filepath,"w") as file:
        file.write("""
/* .-----------------------------------------------------------------------.
 * | This file was generated by NRPy+ for IllinoisGRMHD, as documented in: |
 * |        Tutorial-IllinoisGRMHD__NRPyfied_IGM_expressions.ipynb         |
 * .-----------------------------------------------------------------------.
 * |                Author(s): Leo Werneck and Zach Etienne                |
 * .-----------------------------------------------------------------------.
 * |             Source: https://github.com/leowerneck/NRPyIGM             |
 * .-----------------------------------------------------------------------.
 *
 * File start: """+filename+""" */
\n"""+precontents+"""\n"""+contents+"""\n"""+postcontents+"""
/* File end  : """+filename+""" */
""")
    print("Just generated the file: "+filepath)

# Set up a "variable definition" file generating function
def generate_variable_definition_file(gfslist,filename,varnameidx=0,comment="",extra=""):

    # Find the largest name inside the gfslist
    largest_name_len = len(gfslist[0][0])
    for j in range(len(gfslist)):
        if(len(gfslist[j][0]) > largest_name_len):
            largest_name_len =  len(gfslist[j][0])

    # Initialize string to comment
    string = comment
    for j in range(len(gfslist)):
        string += "static const int "+gfslist[j][varnameidx]
        for k in range(largest_name_len - len(gfslist[j][varnameidx])):
            string += " "
        
        string += " = "+str(j)+";\n"
    
    if(extra != ""):
        string += "\n"+extra
        
    # Write string to file
    filepath = os.path.join(NRPy_headers_dir_path,filename)
    NRPy_IGM_write_to_file(filepath,filename,string)

# Set up a "read from gf" file generating function
def generate_read_in_file(arrayname,gfslist,filename,varnameidx=0,gfnameidx=1,postname="",postpostname="",comment="",extra=""):
    
    # Find the largest name inside the gfslist
    largest_name_len = len(gfslist[0][0])
    for j in range(len(gfslist)):
        if(len(gfslist[j][0]) > largest_name_len):
            largest_name_len =  len(gfslist[j][0])
    
    # Initialize string to comment
    string = comment
    for j in range(len(gfslist)):
        string += arrayname+"["+gfslist[j][varnameidx]+"]"+postname
        for k in range(largest_name_len - len(gfslist[j][varnameidx])):
            string += " "
        
        string += " = "+gfslist[j][gfnameidx]+postpostname+";\n"
        
    if(extra != ""):
        string += "\n"+extra

    # Write string to file
    filepath = os.path.join(NRPy_headers_dir_path,filename)
    NRPy_IGM_write_to_file(filepath,filename,string)